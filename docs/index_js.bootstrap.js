"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcreate_wasm_app"] = self["webpackChunkcreate_wasm_app"] || []).push([["index_js"],{

/***/ "../pkg/lw_rpg.js":
/*!************************!*\
  !*** ../pkg/lw_rpg.js ***!
  \************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Character: () => (/* reexport safe */ _lw_rpg_bg_js__WEBPACK_IMPORTED_MODULE_1__.Character),\n/* harmony export */   CharacterList: () => (/* reexport safe */ _lw_rpg_bg_js__WEBPACK_IMPORTED_MODULE_1__.CharacterList),\n/* harmony export */   __wbg_set_wasm: () => (/* reexport safe */ _lw_rpg_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_wasm),\n/* harmony export */   __wbindgen_init_externref_table: () => (/* reexport safe */ _lw_rpg_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_init_externref_table),\n/* harmony export */   __wbindgen_throw: () => (/* reexport safe */ _lw_rpg_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_throw)\n/* harmony export */ });\n/* harmony import */ var _lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lw_rpg_bg.wasm */ \"../pkg/lw_rpg_bg.wasm\");\n/* harmony import */ var _lw_rpg_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lw_rpg_bg.js */ \"../pkg/lw_rpg_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_0__]);\n_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n(0,_lw_rpg_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_wasm)(_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_0__);\n_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_start();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://create-wasm-app/../pkg/lw_rpg.js?\n}");

/***/ }),

/***/ "../pkg/lw_rpg_bg.js":
/*!***************************!*\
  !*** ../pkg/lw_rpg_bg.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Character: () => (/* binding */ Character),\n/* harmony export */   CharacterList: () => (/* binding */ CharacterList),\n/* harmony export */   __wbg_set_wasm: () => (/* binding */ __wbg_set_wasm),\n/* harmony export */   __wbindgen_init_externref_table: () => (/* binding */ __wbindgen_init_externref_table),\n/* harmony export */   __wbindgen_throw: () => (/* binding */ __wbindgen_throw)\n/* harmony export */ });\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nconst CharacterFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_character_free(ptr >>> 0, 1));\n\nclass Character {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CharacterFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_character_free(ptr, 0);\n    }\n}\n\nconst CharacterListFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_characterlist_free(ptr >>> 0, 1));\n\nclass CharacterList {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CharacterList.prototype);\n        obj.__wbg_ptr = ptr;\n        CharacterListFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CharacterListFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_characterlist_free(ptr, 0);\n    }\n    /**\n     * @returns {CharacterList}\n     */\n    static new() {\n        const ret = wasm.characterlist_new();\n        return CharacterList.__wrap(ret);\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_health(index) {\n        const ret = wasm.characterlist_get_health(this.__wbg_ptr, index);\n        return ret;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_name(index) {\n        const ret = wasm.characterlist_get_name(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_name_size(index) {\n        const ret = wasm.characterlist_get_name_size(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_subclass(index) {\n        const ret = wasm.characterlist_get_subclass(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_subclass_size(index) {\n        const ret = wasm.characterlist_get_subclass_size(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_description(index) {\n        const ret = wasm.characterlist_get_description(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_description_size(index) {\n        const ret = wasm.characterlist_get_description_size(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_attack(index) {\n        const ret = wasm.characterlist_get_attack(this.__wbg_ptr, index);\n        return ret;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_defense(index) {\n        const ret = wasm.characterlist_get_defense(this.__wbg_ptr, index);\n        return ret;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_will(index) {\n        const ret = wasm.characterlist_get_will(this.__wbg_ptr, index);\n        return ret;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_speed(index) {\n        const ret = wasm.characterlist_get_speed(this.__wbg_ptr, index);\n        return ret;\n    }\n    /**\n     * @param {number} index\n     * @returns {boolean}\n     */\n    get_is_flying(index) {\n        const ret = wasm.characterlist_get_is_flying(this.__wbg_ptr, index);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_attacks(index) {\n        const ret = wasm.characterlist_get_attacks(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_attacks_count(index) {\n        const ret = wasm.characterlist_get_attacks_count(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_companions(index) {\n        const ret = wasm.characterlist_get_companions(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    get_companions_count(index) {\n        const ret = wasm.characterlist_get_companions_count(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get_name_list() {\n        const ret = wasm.characterlist_get_name_list(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get_character_count() {\n        const ret = wasm.characterlist_get_character_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nfunction __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_0;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n\n//# sourceURL=webpack://create-wasm-app/../pkg/lw_rpg_bg.js?\n}");

/***/ }),

/***/ "../pkg/lw_rpg_bg.wasm":
/*!*****************************!*\
  !*** ../pkg/lw_rpg_bg.wasm ***!
  \*****************************/
/***/ ((module, exports, __webpack_require__) => {

eval("{/* harmony import */ var WEBPACK_IMPORTED_MODULE_0 = __webpack_require__(/*! ./lw_rpg_bg.js */ \"../pkg/lw_rpg_bg.js\");\nmodule.exports = __webpack_require__.v(exports, module.id, \"4a5938864c90427d0ce3\", {\n\t\"./lw_rpg_bg.js\": {\n\t\t\"__wbindgen_throw\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_throw,\n\t\t\"__wbindgen_init_externref_table\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_init_externref_table\n\t}\n});\n\n//# sourceURL=webpack://create-wasm-app/../pkg/lw_rpg_bg.wasm?\n}");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lw_rpg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lw-rpg */ \"../pkg/lw_rpg.js\");\n/* harmony import */ var lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lw-rpg/lw_rpg_bg.wasm */ \"../pkg/lw_rpg_bg.wasm\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([lw_rpg__WEBPACK_IMPORTED_MODULE_0__, lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__]);\n([lw_rpg__WEBPACK_IMPORTED_MODULE_0__, lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nconst characterList = lw_rpg__WEBPACK_IMPORTED_MODULE_0__.CharacterList.new();\n\n// Session storage functions\nfunction saveCharacterState(index, characterData, currentView = 'character-view') {\n  const state = {\n    characterIndex: index,\n    characterData: characterData,\n    currentView: currentView,\n    timestamp: Date.now()\n  };\n  sessionStorage.setItem('lw-rpg-state', JSON.stringify(state));\n}\n\nfunction loadCharacterState() {\n  const saved = sessionStorage.getItem('lw-rpg-state');\n  return saved ? JSON.parse(saved) : null;\n}\n\nfunction clearCharacterState() {\n  sessionStorage.removeItem('lw-rpg-state');\n}\n\nfunction saveViewState(view) {\n  const savedState = loadCharacterState();\n  if (savedState) {\n    savedState.currentView = view;\n    sessionStorage.setItem('lw-rpg-state', JSON.stringify(savedState));\n  }\n}\nconst nameListPtr = characterList.get_name_list();\nconst listSize = characterList.get_character_count();\nconst nameListArray = new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, nameListPtr);\n\n// Convert the byte array to string and split by null terminators\nconst decoder = new TextDecoder('utf-8');\nconst fullString = decoder.decode(nameListArray);\nconst characterNames = fullString.split('\\0').filter(name => name.length > 0).slice(0, listSize);\n\n// Add characters to the HTML list\nconst characterListElement = document.getElementById('character-list');\ncharacterListElement.innerHTML = characterNames.map((name, index) =>\n  `<button class=\"character-item\" data-index=\"${index}\">${name}</button>`\n).join('');\n\n// Check for saved state on page load\nconst savedState = loadCharacterState();\nif (savedState && savedState.characterData) {\n  if (savedState.currentView === 'character-view') {\n    // Restore character view with saved data\n    showCharacterView(savedState.characterData);\n  } else {\n    // Stay on character selection but keep the saved data\n    showCharacterSelection();\n  }\n} else {\n  // No saved state, default to character selection\n  showCharacterSelection();\n}\n\n// Handle character selection\ncharacterListElement.addEventListener('click', (event) => {\n  console.log('Click detected on:', event.target);\n  if (event.target.classList.contains('character-item')) {\n    let selectedIndex = parseInt(event.target.dataset.index);\n    let selectedName = characterNames[selectedIndex];\n\n    console.log('Character selected:', selectedName, 'Index:', selectedIndex);\n\n    // Get all character data and convert pointers to strings\n    const decoder = new TextDecoder('utf-8');\n\n    const namePtr = characterList.get_name(selectedIndex);\n    const nameSize = characterList.get_name_size(selectedIndex);\n    const subclassPtr = characterList.get_subclass(selectedIndex);\n    const subclassSize = characterList.get_subclass_size(selectedIndex);\n    const descriptionPtr = characterList.get_description(selectedIndex);\n    const descriptionSize = characterList.get_description_size(selectedIndex);\n\n    const name = decoder.decode(new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, namePtr, nameSize));\n    const subclass = decoder.decode(new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, subclassPtr, subclassSize));\n    const description = decoder.decode(new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, descriptionPtr, descriptionSize));\n\n    // Get attacks\n    const attacksPtr = characterList.get_attacks(selectedIndex);\n    const attacksCount = characterList.get_attacks_count(selectedIndex);\n    let attacks = [];\n    if (attacksCount > 0) {\n      const attacksArray = new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, attacksPtr);\n      const attacksString = decoder.decode(attacksArray);\n      attacks = attacksString.split('\\0').filter(attack => attack.length > 0).slice(0, attacksCount);\n    }\n\n    // Get saved state for this character\n    const savedState = loadCharacterState();\n    const hasSavedData = savedState && savedState.characterIndex === selectedIndex;\n    \n    // Create character data object, using saved data if available\n    const characterData = {\n      index: selectedIndex,\n      name: name,\n      subclass: subclass,\n      description: description,\n      health: hasSavedData ? savedState.characterData.health : characterList.get_health(selectedIndex),\n      attack: hasSavedData ? savedState.characterData.attack : characterList.get_attack(selectedIndex),\n      defense: hasSavedData ? savedState.characterData.defense : characterList.get_defense(selectedIndex),\n      will: hasSavedData ? savedState.characterData.will : characterList.get_will(selectedIndex),\n      speed: hasSavedData ? savedState.characterData.speed : characterList.get_speed(selectedIndex),\n      isFlying: hasSavedData ? savedState.characterData.isFlying : characterList.get_is_flying(selectedIndex),\n      attacks: hasSavedData ? savedState.characterData.attacks : attacks\n    };\n\n    // Save state and display character view\n    saveCharacterState(selectedIndex, characterData);\n    showCharacterView(characterData);\n  }\n});\n\n// Function to show character view and hide selection\nfunction showCharacterView(data) {\n  // Hide selection section, show character view\n  document.getElementById('character-selection-section').style.display = 'none';\n  document.getElementById('character-view-section').style.display = 'block';\n  document.getElementById('back-button').style.display = 'block';\n\n  // Save view state\n  saveViewState('character-view');\n\n  // Update character data\n  displayCharacter(data);\n}\n\n// Function to show selection and hide character view\nfunction showCharacterSelection() {\n  document.getElementById('character-selection-section').style.display = 'block';\n  document.getElementById('character-view-section').style.display = 'none';\n  document.getElementById('back-button').style.display = 'none';\n  \n  // Save view state but don't clear character data\n  saveViewState('character-selection');\n}\n\n// Function to display character data\nfunction displayCharacter(data) {\n  // Update basic info\n  document.getElementById('character-name').textContent = data.name;\n  document.getElementById('character-subclass').textContent = data.subclass;\n  document.getElementById('character-description').textContent = data.description;\n\n  // Update stats in input elements\n  setStatValue('character-health', data.health);\n  setStatValue('character-attack', data.attack);\n  setStatValue('character-defense', data.defense);\n  setStatValue('character-will', data.will);\n  setStatValue('character-speed', data.speed);\n  document.getElementById('character-flying').checked = data.isFlying;\n  \n  // Add change listener for checkbox to save state\n  document.getElementById('character-flying').addEventListener('change', updateStoredStats);\n\n  // Add reset button event listeners\n  document.getElementById('reset-stats-btn').addEventListener('click', resetCharacterStats);\n  document.getElementById('reset-abilities-btn').addEventListener('click', resetCharacterAbilities);\n\n  // Add portrait upload event listeners\n  document.getElementById('upload-portrait-btn').addEventListener('click', () => {\n    document.getElementById('portrait-upload').click();\n  });\n  document.getElementById('portrait-upload').addEventListener('change', handlePortraitUpload);\n  document.getElementById('remove-portrait-btn').addEventListener('click', removeCustomPortrait);\n\n  // Update attacks\n  if (data.attacks && data.attacks.length > 0) {\n    const attacksContainer = document.getElementById('character-attacks');\n    attacksContainer.innerHTML = data.attacks.map((attack, index) =>\n      `<div class=\"ability-item\">\n        <textarea class=\"ability-text\" data-attack-index=\"${index}\" placeholder=\"Attack description...\">${attack}</textarea>\n      </div>`\n    ).join('');\n    \n    // Add event listeners for attack text changes\n    const attackTextareas = attacksContainer.querySelectorAll('.ability-text');\n    attackTextareas.forEach(textarea => {\n      textarea.addEventListener('blur', updateStoredStats);\n      textarea.addEventListener('input', autoResizeTextarea);\n    });\n  } else {\n    document.getElementById('character-attacks').innerHTML = '<div class=\"loading\">No abilities available</div>';\n  }\n\n  // Hide companions section for now\n  document.getElementById('companions-section').style.display = 'none';\n\n  // Load custom portrait if available\n  loadCustomPortrait(data.index);\n}\n\n// Back button functionality\ndocument.getElementById('back-button').addEventListener('click', showCharacterSelection);\n\n// Stat display functions for infinity symbol\nfunction setStatValue(elementId, value) {\n  const element = document.getElementById(elementId);\n  console.log(`Setting ${elementId} to value: ${value} (type: ${typeof value})`);\n\n  // Remove existing event listeners to prevent duplicates\n  element.removeEventListener('focus', handleStatFocus);\n  element.removeEventListener('blur', handleStatBlur);\n  element.removeEventListener('input', handleStatInput);\n\n  // Set the value first\n  element.value = value;\n\n  // Add event listeners\n  element.addEventListener('focus', handleStatFocus);\n  element.addEventListener('blur', handleStatBlur);\n  element.addEventListener('input', handleStatInput);\n\n  // Set initial display (infinity if 255)\n  if (value === 255) {\n    console.log(`Setting ${elementId} to infinity symbol`);\n    element.type = 'text';  // Change to text to allow infinity symbol\n    element.value = '∞';\n  }\n}\n\nfunction handleStatFocus() {\n  // Show actual number when focused for editing\n  if (this.value === '∞') {\n    this.type = 'number';  // Change back to number for editing\n    this.value = '255';\n  }\n}\n\nfunction handleStatInput() {\n  // Real-time validation while typing\n  if (this.type === 'number') {\n    let value = parseInt(this.value);\n    if (value > 255) {\n      this.value = '255';\n    } else if (value < 0) {\n      this.value = '0';\n    }\n  }\n}\n\nfunction handleStatBlur() {\n  // Validate and clamp the value to 0-255 range\n  let value = parseInt(this.value) || 0;\n  value = Math.max(0, Math.min(255, value));\n  this.value = value;\n\n  // Show infinity symbol when not focused if value is 255\n  if (value === 255) {\n    this.type = 'text';  // Change to text to allow infinity symbol\n    this.value = '∞';\n  }\n\n  // Update sessionStorage with current stats\n  updateStoredStats();\n}\n\nfunction updateStoredStats() {\n  const savedState = loadCharacterState();\n  if (!savedState) return;\n\n  // Update the characterData with current values\n  savedState.characterData.health = getStatValue('character-health');\n  savedState.characterData.attack = getStatValue('character-attack');\n  savedState.characterData.defense = getStatValue('character-defense');\n  savedState.characterData.will = getStatValue('character-will');\n  savedState.characterData.speed = getStatValue('character-speed');\n  savedState.characterData.isFlying = document.getElementById('character-flying').checked;\n\n  // Update attacks from textareas\n  const attackTextareas = document.querySelectorAll('.ability-text');\n  savedState.characterData.attacks = Array.from(attackTextareas).map(textarea => textarea.value);\n\n  // Save back to sessionStorage\n  sessionStorage.setItem('lw-rpg-state', JSON.stringify(savedState));\n}\n\nfunction getStatValue(elementId) {\n  const element = document.getElementById(elementId);\n  return element.value === '∞' ? 255 : parseInt(element.value) || 0;\n}\n\nfunction autoResizeTextarea() {\n  this.style.height = 'auto';\n  this.style.height = (this.scrollHeight) + 'px';\n}\n\nfunction resetCharacterStats() {\n  if (!confirm('Are you sure you want to reset all stats to their original values? This cannot be undone.')) {\n    return;\n  }\n  \n  const savedState = loadCharacterState();\n  if (!savedState) return;\n\n  const characterIndex = savedState.characterIndex;\n  \n  // Get original character data from WASM\n  const decoder = new TextDecoder('utf-8');\n  \n  const namePtr = characterList.get_name(characterIndex);\n  const nameSize = characterList.get_name_size(characterIndex);\n  const subclassPtr = characterList.get_subclass(characterIndex);\n  const subclassSize = characterList.get_subclass_size(characterIndex);\n  const descriptionPtr = characterList.get_description(characterIndex);\n  const descriptionSize = characterList.get_description_size(characterIndex);\n\n  const name = decoder.decode(new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, namePtr, nameSize));\n  const subclass = decoder.decode(new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, subclassPtr, subclassSize));\n  const description = decoder.decode(new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, descriptionPtr, descriptionSize));\n\n  // Get original attacks\n  const attacksPtr = characterList.get_attacks(characterIndex);\n  const attacksCount = characterList.get_attacks_count(characterIndex);\n  let attacks = [];\n  if (attacksCount > 0) {\n    const attacksArray = new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, attacksPtr);\n    const attacksString = decoder.decode(attacksArray);\n    attacks = attacksString.split('\\0').filter(attack => attack.length > 0).slice(0, attacksCount);\n  }\n\n  // Create original character data\n  const originalData = {\n    index: characterIndex,\n    name: name,\n    subclass: subclass,\n    description: description,\n    health: characterList.get_health(characterIndex),\n    attack: characterList.get_attack(characterIndex),\n    defense: characterList.get_defense(characterIndex),\n    will: characterList.get_will(characterIndex),\n    speed: characterList.get_speed(characterIndex),\n    isFlying: characterList.get_is_flying(characterIndex),\n    attacks: attacks\n  };\n\n  // Update the display with original data\n  displayCharacter(originalData);\n  \n  // Save the reset state\n  saveCharacterState(characterIndex, originalData);\n}\n\nfunction resetCharacterAbilities() {\n  if (!confirm('Are you sure you want to reset all abilities to their original text? This cannot be undone.')) {\n    return;\n  }\n  \n  const savedState = loadCharacterState();\n  if (!savedState) return;\n\n  const characterIndex = savedState.characterIndex;\n  \n  // Get original attacks from WASM\n  const decoder = new TextDecoder('utf-8');\n  const attacksPtr = characterList.get_attacks(characterIndex);\n  const attacksCount = characterList.get_attacks_count(characterIndex);\n  let originalAttacks = [];\n  \n  if (attacksCount > 0) {\n    const attacksArray = new Uint8Array(lw_rpg_lw_rpg_bg_wasm__WEBPACK_IMPORTED_MODULE_1__.memory.buffer, attacksPtr);\n    const attacksString = decoder.decode(attacksArray);\n    originalAttacks = attacksString.split('\\0').filter(attack => attack.length > 0).slice(0, attacksCount);\n  }\n\n  // Update only the attacks in saved state (keep other edits)\n  savedState.characterData.attacks = originalAttacks;\n\n  // Rebuild the attacks display\n  const attacksContainer = document.getElementById('character-attacks');\n  if (originalAttacks.length > 0) {\n    attacksContainer.innerHTML = originalAttacks.map((attack, index) =>\n      `<div class=\"ability-item\">\n        <textarea class=\"ability-text\" data-attack-index=\"${index}\" placeholder=\"Attack description...\">${attack}</textarea>\n      </div>`\n    ).join('');\n    \n    // Re-add event listeners for the new textareas\n    const attackTextareas = attacksContainer.querySelectorAll('.ability-text');\n    attackTextareas.forEach(textarea => {\n      textarea.addEventListener('blur', updateStoredStats);\n      textarea.addEventListener('input', autoResizeTextarea);\n    });\n  } else {\n    attacksContainer.innerHTML = '<div class=\"loading\">No abilities available</div>';\n  }\n\n  // Save the updated state\n  sessionStorage.setItem('lw-rpg-state', JSON.stringify(savedState));\n}\n\n// Portrait upload functions\nfunction handlePortraitUpload(event) {\n  const file = event.target.files[0];\n  if (!file) return;\n\n  // Check file size (limit to 5MB)\n  if (file.size > 5 * 1024 * 1024) {\n    alert('Image file too large. Please choose a file smaller than 5MB.');\n    return;\n  }\n\n  // Check file type\n  if (!file.type.startsWith('image/')) {\n    alert('Please select a valid image file.');\n    return;\n  }\n\n  const reader = new FileReader();\n  reader.onload = function(e) {\n    const base64Image = e.target.result;\n    const savedState = loadCharacterState();\n    if (savedState) {\n      // Store in localStorage with character-specific key\n      const portraitKey = `lw-rpg-portrait-${savedState.characterIndex}`;\n      localStorage.setItem(portraitKey, base64Image);\n      \n      // Update the portrait display\n      document.getElementById('character-portrait').src = base64Image;\n      \n      // Show remove button, hide upload button text\n      document.getElementById('remove-portrait-btn').style.display = 'inline-block';\n      document.getElementById('upload-portrait-btn').textContent = 'Change Photo';\n    }\n  };\n  reader.readAsDataURL(file);\n}\n\nfunction removeCustomPortrait() {\n  if (!confirm('Are you sure you want to remove this custom portrait and return to the default image?')) {\n    return;\n  }\n  \n  const savedState = loadCharacterState();\n  if (savedState) {\n    // Remove from localStorage\n    const portraitKey = `lw-rpg-portrait-${savedState.characterIndex}`;\n    localStorage.removeItem(portraitKey);\n    \n    // Reset to default image\n    document.getElementById('character-portrait').src = 'default_profile.jpg';\n    \n    // Hide remove button, reset upload button text\n    document.getElementById('remove-portrait-btn').style.display = 'none';\n    document.getElementById('upload-portrait-btn').textContent = 'Upload Photo';\n  }\n}\n\nfunction loadCustomPortrait(characterIndex) {\n  const portraitKey = `lw-rpg-portrait-${characterIndex}`;\n  const customPortrait = localStorage.getItem(portraitKey);\n  \n  if (customPortrait) {\n    // Load custom portrait\n    document.getElementById('character-portrait').src = customPortrait;\n    document.getElementById('remove-portrait-btn').style.display = 'inline-block';\n    document.getElementById('upload-portrait-btn').textContent = 'Change Photo';\n  } else {\n    // Use default portrait\n    document.getElementById('character-portrait').src = 'default_profile.jpg';\n    document.getElementById('remove-portrait-btn').style.display = 'none';\n    document.getElementById('upload-portrait-btn').textContent = 'Upload Photo';\n  }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://create-wasm-app/./index.js?\n}");

/***/ })

}]);